// --------------------------------------------------------------
// 
// 六、Cypher图数据库查询语言
//
// 

CREATE (n1:`人物` {name: '刘备'}) -[:`关系`{relationship:'兄长'}]-> (n2:`人物` {name: '关羽'}),
       (n2) -[:`关系`{relationship:'兄长'}]-> (n3:`人物` {name: '张飞'}),
       (n1) -[:`关系`{relationship:'兄长'}]-> (n3),
       (n1) -[:`关系`{relationship:'主公'}]-> (n4:`人物` {name: '赵云'}),
       (n1) -[:`关系`{relationship:'对手'}]-> (n5:`人物` {name: '曹操'});

	   
	   
// 寻找'刘备'节点
MATCH (n:人物{name:'刘备'}) RETURN n;

// 寻找'刘备'节点，使用WHERE
MATCH (n:人物) WHERE n.name = '刘备' RETURN n;

// 寻找刘备的兄弟
MATCH (n:人物{name:'刘备'}) -[:关系{relationship:'兄长'}]-> (n1) RETURN n1;

// 寻找刘备的小弟(兄弟的兄弟)
MATCH (n:人物{name:'刘备'}) -[:关系*2{relationship:'兄长'}]-> (n1) RETURN n1;

// 寻找刘备的所有社会关系。关系可以双向。
MATCH (n:人物{name:'刘备'}) -[:关系]- (n1) RETURN n1;

// 如果说“兄弟的敌人是我的敌人”，试试看，能不能找到谁是张飞的敌人
MATCH (n:人物{name:'张飞'}) <-[:关系*{relationship:'兄长'}]- (n1) -[:关系{relationship:'对手'}]- (n2) RETURN DISTINCT n2;

// 为‘刘备’增加2个标签
MATCH (n:人物{name:'刘备'}) SET n:皇帝:好人;

// 显示’刘备’节点的标签和属性
MATCH (n:人物{name:'刘备'}) RETURN labels(n) AS nodeLabel, keys(n) AS nodeProperties, n.name;

// 删除’刘备’的’好人’标签
MATCH (n:人物{name:'刘备'}) REMOVE n:好人;

// 显示节点的标签和属性，以及关系的类型和属性，并以表状结构返回结果
MATCH (n:人物{name:'刘备'}) -[r]- (n1) 
RETURN type(r) AS relationshipType, keys(r) AS relationshipProperties, labels(n1) AS nodeLabel, keys(n1) AS nodeProperties, n1.name;

// 为‘刘备’增加性别属性
MATCH (n:人物{name:'刘备'}) SET n.genre = '男';

// 删除‘刘备’的性别属性
MATCH (n:人物{name:'刘备'}) SET n.genre = NULL;

// 如果节点没有关系
MATCH (n:人物{name:'刘备'}) DELETE n;

// 如果节点有关系，使用DETACH DELETE会先删除连接到该节点的所有关系，然后再删除节点
MATCH (n:人物{name:'刘备'}) DETACH DELETE n;

// 删除所有节点。如果节点有关系，也删除关系。
MATCH (n) DETACH DELETE n;

// 仅删除关系，保留节点
MATCH (n:人物{name:'刘备'}) –[r]- () DELETE r;

// 根据数据库中的节点id寻找节点
MATCH (n) WHERE id(n) = 0 RETURN n;

// 创建索引
CREATE INDEX ON :`人物`(name);

// 显示所有索引
CALL db.indexes     

// 显示索引和限制
:schema             

// 创建复合索引
CREATE INDEX ON :`人物`(name,title);

// 创建节点唯一性限制
CREATE CONSTRAINT ON (person:`人物`)
ASSERT person.name IS UNIQUE;

// 创建节点属性存在性限制
CREATE CONSTRAINT ON (person:`人物`)
ASSERT exists(person.name);

// 创建节点主键
CREATE CONSTRAINT ON (person:`人物`)
ASSERT (person.name, person.title) IS NODE KEY;

// 创建关系属性的存在性限制
CREATE CONSTRAINT ON ()-[r:`关系`]->()
ASSERT exists(r.relationship);

// 使用MERGE
MERGE  (n1:`人物` {name: '刘备'})
MERGE  (n2:`人物` {name: '刘禅'})
MERGE  (n1) -[:`关系`{relationship:'父亲'}]-> (n2)

// 运行过程
CALL dbms.procedures()

// 运行函数
WITH range(1,3) AS r
UNWIND r AS r1
RETURN sum(r1)

// 显示数据库的元模型(meta graph model)
CALL db.schema;

